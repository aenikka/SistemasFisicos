void setup()
{
  Serial.begin(115200);
}

void SendSignal()
{
}

void Bomb()
{

  enum class BombState {SETUP, ACTIVATED};
  static uint8_t counter = 20;
  static BombState bombstate =  BombState::SETUP;
  static uint32_t previousMillis = 0;
  const uint32_t interval = 1000;
  int rightpassword[] = {'d', 'u', 'd', 'd', 'u', 'a'};
  int answer[6];


  switch (bombstate)
  {

    case  BombState::SETUP:
      {

        //condicional para leer los eventos que quiera evaluar
        //UP,DOWN,ARM
        if (Serial.available() > 0) {
          int dataRx = Serial.read();

          if (dataRx == 'u')
          {
            if (counter < 60)
            {
              counter++;
              Serial.println(counter);
            }
          }
          else if (dataRx == 'd')
          {
            if (counter > 10)
            {
              counter--;
              Serial.println(counter);
            }
          }
          else if (dataRx == 'a')
          {
            bombstate = BombState::ACTIVATED;
            previousMillis = millis();

          }

        }

        break;
      }


    case BombState::ACTIVATED:
      {
        //Countdown
        if (millis() - previousMillis >= interval)
        {
          counter --;
          previousMillis = millis();
          Serial.println(counter);

          if (counter == 0)
          {
            bombstate = BombState::SETUP;
            Serial.println("KABOOM!");
            counter = 20;
          }


        }
        //Option to defuse bomb

        for (int i = 0; i < 6; i++)
        {
          if (Serial.available() > 0) 
          {
            int input = Serial.read();
            answer[i] = input;
            Serial.println(answer[i]);
          }

        }

        

          break;
        }


      default:
        Serial.println("Error");
        break;
      }




  }



  void loop() {
    Bomb();
    SendSignal();

  }
